<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://kodermine.com</link>
    <atom:link href="http://kodermine.com/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Tue, 20 May 2014 00:40:27 +0000</pubDate>
    <lastBuildDate>Tue, 20 May 2014 00:40:27 +0000</lastBuildDate>

    
    
    <item>
      <title>Cool stuff with Git</title>
      <link>http://kodermine.com/git/2014/05/19/cool_stuff_with_git/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://kodermine.com/git/2014/05/19/cool_stuff_with_git</guid>
      <description>&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;02e036909a5e01312ce96e104d561c21&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ruby basics and more</title>
      <link>http://kodermine.com/ruby/2014/05/18/ruby_basics_and_more/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://kodermine.com/ruby/2014/05/18/ruby_basics_and_more</guid>
      <description>&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;32da8170891e0131712b6e502952b505&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Git Basics</title>
      <link>http://kodermine.com/git/2014/05/18/git_basics/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://kodermine.com/git/2014/05/18/git_basics</guid>
      <description>&lt;h1&gt;Koding Ruby Git Basics&lt;/h1&gt;

&lt;p&gt;Hello Everyone, this is the shownotes that comes with the Git Basics hangout that we just did&lt;/p&gt;

&lt;h2&gt;What we learned&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Git explained, timelines, commits, staging, timecapsules&lt;/li&gt;
&lt;li&gt;VCS Concept&lt;/li&gt;
&lt;li&gt;Adding configurations&lt;/li&gt;
&lt;li&gt;Generating SSH keys&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic Commands&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git Tips&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using wildcards&lt;/li&gt;
&lt;li&gt;Separate commits&lt;/li&gt;
&lt;li&gt;branching&lt;/li&gt;
&lt;li&gt;merge conflicts &amp;quot;OH NO T_T&amp;quot;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Version Control Systems&lt;/h2&gt;

&lt;p&gt;Version control(VCS) is a system that records changes to a file or a set of files in a repository. In the programming world a version control system is very useful. Its very convenient to have a tool that keeps track of the changes we&amp;#39;ve made overtime in the lifecycle of our project, if ever we made a mistake in our code we could easily reset a file back to a version where it was working.&lt;/p&gt;

&lt;p&gt;On top of all that a VCS is not just limited for programmers, writers, artists and basically anyone who uses a computer that makes changes to files can use this.&lt;/p&gt;

&lt;p&gt;Having a version controll is also great for work that requires collaboration since everyone&amp;#39;s changes are tracked and if we are to merge them all together we can do it easily using git.&lt;/p&gt;

&lt;h2&gt;Git - a distributed Version Control System&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. [^1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git is actually one of many version control systems out there, and what makes git different from other version control systems is that it&amp;#39;s &amp;quot;distributed&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what does distributed version control mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Version control systems have different types:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Version Control System&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many people’s version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they’re clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to.&lt;/p&gt;

&lt;p&gt;To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.&lt;/p&gt;

&lt;p&gt;defenition from &lt;a href=&quot;http://git-scm.com/book/en/Getting-Started-About-Version-Control&quot;&gt;git-cm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://git-scm.com/figures/18333fig0101-tn.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image from git-scm.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Centralized Version Control System&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The next major issue that people encounter is that they need to collaborate with developers on other systems. To deal with this problem, Centralized Version Control Systems (CVCSs) were developed. These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. For many years, this has been the standard for version control.
defenition from &lt;a href=&quot;http://git-scm.com/book/en/Getting-Started-About-Version-Control&quot;&gt;git-cm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://git-scm.com/figures/18333fig0102-tn.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image from git-scm.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Distributed Version Control System&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to
the server to restore it. Every checkout is really a full backup of all the data.&lt;/p&gt;

&lt;p&gt;defenition from &lt;a href=&quot;http://git-scm.com/book/en/Getting-Started-About-Version-Control&quot;&gt;git-cm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://git-scm.com/figures/18333fig0103-tn.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image from git-scm.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Configuring our git&lt;/h2&gt;

&lt;p&gt;We want git to recognize who we are, so let&amp;#39;s configure it to do so by running the following commands in our terminal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git config --global user.name &amp;quot;Your User Name&amp;quot; # this will set the username
git config --global user.email your@email.com # this will set your email address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;git config --global actually just stores these configuration in a separate file in your home directory. You can view it by typing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;cat ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can actually do looots of things with git config, but for now, let&amp;#39;s just use it to add our email and username.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONFIG BONUS&lt;/strong&gt;
Let&amp;#39;s add pretty colors to our git &amp;lt;3&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make our git interface have color syntax (e.g. red for lines removed and green for lines added)&lt;/p&gt;

&lt;h2&gt;Setting up SSH KEYS&lt;/h2&gt;

&lt;p&gt;In our hangouts I simply demonstrated a tutorial provided by &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;Github&lt;/a&gt;. Please follow that link to learn how to generate SSH keys for your machine and add them to github. Alternatively you can download the client for your machine and this will automatically add ssh keys and add them to github.&lt;/p&gt;

&lt;h2&gt;Git timelines&lt;/h2&gt;

&lt;p&gt;Git creates a timeline for us that will contain time capsules or snapshots of our folder. The green marks below represent the snapshots. We will discuss what they are below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/shard/s217/sh/4165756c-a8e9-4f5a-9c03-2496ac5c0828/575891ce6d6a3415406823969b9b21bb/res/c016613c-5a7f-4810-9bcd-d99db9bef8c4/skitch.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Basic Git Commands&lt;/h2&gt;

&lt;h3&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt; initializes a git repository in whatever folder we&amp;#39;re located in. It enables the folder we&amp;#39;re in to be version controlled.&lt;/p&gt;

&lt;p&gt;Without initializing git, we cannot run any git commands in our folder. Let&amp;#39;s try it out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git status #running git command in a folder is not git enabled
output: fatal: Not a git repository (or any of the parent directories): .git

git init # to initialize git
output: Initialized empty Git repository in /Users/shopify/test/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; displays if there&amp;#39;s any differences between the current files we have and the last commit/snapshot that was in our repository. It also displays if there&amp;#39;s anything currently staged in our repository.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; adds files to our &lt;em&gt;stage&lt;/em&gt;. Git add accepts a filename as an argument, or a wild card. We can do &lt;code&gt;git add .&lt;/code&gt; to add all the files. We can also pass it the name of the extension + a wild card so that it will add all the files with that extension &lt;code&gt;git add ‘*.txt’&lt;/code&gt; will add all the files that have &lt;code&gt;txt&lt;/code&gt; as an extension.&lt;/p&gt;

&lt;h4&gt;What is staged?&lt;/h4&gt;

&lt;p&gt;So let&amp;#39;s imagine an actual stage, and snapshots as actual pictures. When we add new files to our stage they are not necessarily in a snapshot yet, just think that they&amp;#39;re getting ready for a photoshoot and they&amp;#39;re posing right now. When we take the picture it&amp;#39;s the actual snapshot and the files that are in the stage are the only ones included in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/shard/s217/sh/a540e82c-f5db-4c0a-a515-00ae8bf11904/9483f62530491fed6fe416757a8039e1/res/10d307fb-7053-42d0-b763-e782bf45eaf0/skitch.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; records the changes or takes the &amp;quot;snapshot&amp;quot; of the files on the stage. &lt;code&gt;git commit&lt;/code&gt; accepts the option &lt;code&gt;-m&lt;/code&gt; and a message parameter that will serve as the title of the snapshot.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git commit -m &amp;quot;fixed the typo &amp;#39;asdf&amp;#39; to &amp;#39;qwerty&amp;#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; It&amp;#39;s a good practice to pass short but detailed messages of what we did for the commit.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We used &lt;code&gt;git remote&lt;/code&gt; to connect with our github repo. Git remote allows us to add a remote repositorie from the cloud that will be connected to our current repository.&lt;/p&gt;

&lt;p&gt;Usually it is best to keep our original repository in the cloud just in case something happens to our devices.&lt;/p&gt;

&lt;p&gt;In the hangout we passed 3 parameters to &lt;code&gt;git remote [action] [name-of-remote-repository] [url-of-the-repository]&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Adding Repositories&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;action&lt;/code&gt; - we can pass either &lt;code&gt;add&lt;/code&gt; or &lt;code&gt;rm&lt;/code&gt; to add or remove our remote repository.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;name-of-repository&lt;/code&gt; - here we will pass the name we would like to assign to our remote repository. It&amp;#39;s common to name our remote cloud repository &amp;quot;origin&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url-of-the-repository&lt;/code&gt; - We&amp;#39;ve used github to get the url of our repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps to get the remote url&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to http://github.com&lt;/li&gt;
&lt;li&gt;Go to the repository that you want to use, and get the &lt;em&gt;SSH clone url&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.gyazo.com/cc6b82746633400c20769fb2599074e1.gif&quot; height=&quot;500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what our git command looks like&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin git@github.com:your-user-name/git-basics.git&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Removing repositories&lt;/h4&gt;

&lt;p&gt;Removing remote repositories is &lt;em&gt;easy&lt;/em&gt;. All we need to do is this: &lt;code&gt;git remote rm [name-of-repository]&lt;/code&gt;. That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;So if I want to remove &lt;code&gt;origin&lt;/code&gt; I will do &lt;code&gt;git remote rm origin&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Git push&lt;/h3&gt;

&lt;p&gt;Git push allows us to &lt;code&gt;push&lt;/code&gt; and copies our last changes into the remote repository that we created. The changes that are going to be copied are only the ones that are commited.&lt;/p&gt;

&lt;h3&gt;Git stash.&lt;/h3&gt;

&lt;p&gt;There may be times that we want git to remember the files we&amp;#39;ve added to the stage, but we also want to undo it and maybe try something else.&lt;/p&gt;

&lt;p&gt;Git let&amp;#39;s us &lt;code&gt;stash&lt;/code&gt; the files on our stage and keeps it, until we are ready to &lt;code&gt;apply&lt;/code&gt; it again.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First let&amp;#39;s create 2 sample files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ touch sample1.txt sample2.txt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then let&amp;#39;s add them to our stage.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git add sample1.txt sample2.txt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let&amp;#39;s check our status. We can see that we&amp;#39;ve added the files and that it&amp;#39;s ready to be commited.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
&amp;gt; &lt;span class=&quot;c&quot;&gt;# Changes to be committed:&lt;/span&gt;
&amp;gt;#   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt;#
&amp;gt;#  new file:   sample1.txt
&amp;gt;#  new file:   sample2.txt
&amp;gt;#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Now let&amp;#39;s do a &lt;code&gt;git stash&lt;/code&gt; and check the &lt;code&gt;status&lt;/code&gt;. We can see that the files we created are gone.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash
&amp;gt; Saved working directory and index state WIP on gh-pages: 8741e43 fix date
&amp;gt; HEAD is now at 111111 fixing things
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
&amp;gt; &lt;span class=&quot;c&quot;&gt;# On branch origin&lt;/span&gt;
&amp;gt; nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In this step you guys free to add/change/modify any files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let&amp;#39;s do a &lt;code&gt;git stash apply&lt;/code&gt;. Now we can see that the files have been added&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash apply
&amp;gt;# On branch gh-pages
&amp;gt;# Changes to be committed:
&amp;gt;#   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt;#
&amp;gt;#  new file:   sample1.txt
&amp;gt;#  new file:   sample2.txt
&amp;gt;#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;https://help.github.com/articles/generating-ssh-keys
http://git-scm.com/
http://git-scm.com/book/en/Getting-Started-About-Version-Control
http://en.wikipedia.org/wiki/Revision_control&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ruby Basics</title>
      <link>http://kodermine.com/ruby/2014/04/27/intro_to_ruby/</link>
      <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://kodermine.com/ruby/2014/04/27/intro_to_ruby</guid>
      <description>&lt;p&gt;Hello Ruby Koders,&lt;/p&gt;

&lt;p&gt;These are our first shownotes from our Google Hangout session that we had on March 1, 2014.
This also doesn&amp;#39;t include the quiz stuff that we worked on, I&amp;#39;m gonna write a seperate article for that&lt;/p&gt;

&lt;p&gt;In our session we discussed the following topics:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brief Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#what-is-ruby&quot;&gt;What is Ruby&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#everything-is-an-object-in-ruby&quot;&gt;OMG! Everything in Ruby is an object!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ruby-version-managers&quot;&gt;Ruby Version Managers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gems&quot;&gt;Gems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#code-begins-here&quot;&gt;Coding Time&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#simple-iterations-with-ruby&quot;&gt;How to do simple iterations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#constants&quot;&gt;Constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conditionals&quot;&gt;Conditionals&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#if-statement&quot;&gt;If statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#unless-statement&quot;&gt;Unless statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nil-nils&quot;&gt;nil == nada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#range&quot;&gt;Range&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#simple-shorthand-trick&quot;&gt;Converting a range to an array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arrays&quot;&gt;Arrays&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#shorthand-bonus&quot;&gt;&lt;code&gt;&amp;quot;&amp;lt;&amp;lt;&amp;quot;&lt;/code&gt; &lt;code&gt;Array#push&lt;/code&gt; short hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arraypush&quot;&gt;&lt;code&gt;Array#push&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arraypop&quot;&gt;&lt;code&gt;Array#pop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arraydelete&quot;&gt;&lt;code&gt;Array#delete&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arraydelete_at&quot;&gt;&lt;code&gt;Array#delete_at&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What is Ruby&lt;/h2&gt;

&lt;p&gt;Ruby is a programming language created by an &lt;em&gt;awesome&lt;/em&gt; Programmer from Japan named &lt;a href=&quot;http://en.wikipedia.org/wiki/Yukihiro_Matsumoto&quot;&gt;Yukihiro Matusumoto&lt;/a&gt;(or Matz). He had a vision of creating a scripting language that was more powerful than pearl and more object oriented than python. He wanted to make the language human readable and often said &amp;quot;natural, not simple&amp;quot; in a way that it mirrors life.&lt;/p&gt;

&lt;h3&gt;Everything is an object in Ruby&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In Ruby, just like in real life, our world is filled with objects. Everything is an object - integers, characters, text, arrays - everything. - &lt;a href=&quot;https://rubymonk.com/learning/books/1-ruby-primer/chapters/6-objects/lessons/35-introduction-to-objects&quot;&gt;Ruby Monk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;This will be discussed later on when we tackle OOP more in the future&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Ruby Version Managers&lt;/h2&gt;

&lt;p&gt;We need version managers because a Ruby version might have a specific syntax that has been deprecated in another and using another version of Ruby to run an application or script that requires a specific version of Ruby could result to multiple syntax errors.&lt;/p&gt;

&lt;p&gt;To solve this we use a tool called version manager, version managers allows us to install and work with different Ruby environment, interpreters and gems.&lt;/p&gt;

&lt;p&gt;The following are the most notable ruby version managers out there&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rbenv.org&quot;&gt;rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Gems&lt;/h1&gt;

&lt;p&gt;A gem is a module or a library that you can install in your ruby projects so that you are able to use these inside your projects. Gems provide extensions and additional features that extends the capabilities or the Ruby language.&lt;/p&gt;

&lt;p&gt;Throughout our hangouts we will be making use of different gems.&lt;/p&gt;

&lt;h2&gt;Code begins here.&lt;/h2&gt;

&lt;hr&gt;

&lt;h2&gt;Simple iterations with Ruby&lt;/h2&gt;

&lt;p&gt;If you were to write a loop in Java it would probably look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will return:&lt;/p&gt;

&lt;p&gt;Hello World!
Hello World!
Hello World!&lt;/p&gt;

&lt;p&gt;in Ruby we can do the same thing, with a simple and readable(for beginners) line of code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Short and sweet, and it returns the same as above. This is what makes Ruby such a likeable language for most people.&lt;/p&gt;

&lt;h2&gt;Comments&lt;/h2&gt;

&lt;p&gt;Comments are just words or phrases that you want to put into your code but you don&amp;#39;t really want them to be executed as Ruby code. These could be either used in debugging by commenting out lines that are having problems or documenting. To write a variable in Ruby just add the pound key &lt;code&gt;#&lt;/code&gt; before the text&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# This line doesn&amp;#39;t work I wonder why&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# int i = 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Maybe I&amp;#39;ll have a sandwich today.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Nope.. coffee will do just fine.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This will print out hello world&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I like sushi&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Hi ruby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can also write comments with multiple lines using this syntax&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;cm&quot;&gt;=begin&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;I&amp;#39;m just commenting.. right here.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;None of this will be executed.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;Don&amp;#39;t believe me?&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;puts &amp;quot;Believe me!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Variables&lt;/h2&gt;

&lt;p&gt;Since Ruby is a dynamic programming language we don&amp;#39;t have to declare variable types anymore! Goodbye &lt;code&gt;int i = 0&lt;/code&gt; and hello&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# we can assign an integer to a variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# replace it with a string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a string! wow!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# replace it with a boolean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# replace it with a string again.... with a heart shape because everyone likes hearts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dynamic &amp;lt;3&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ruby programmers like to use the &amp;quot;Ruby Convention&amp;quot; or the &amp;quot;Ruby Way&amp;quot; . We like using &lt;strong&gt;underscores, NOT ~~camel case~~&lt;/strong&gt; (sorry programmers from other languages TT_TT we don&amp;#39;t hate you I promise &amp;lt;3)&lt;/p&gt;

&lt;p&gt;So instead of writing something like: &lt;code&gt;myFirstVariableInRuby&lt;/code&gt; we want to see something like &lt;code&gt;my_first_variable_in_ruby&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I would advise you all to follow this convention, it&amp;#39;s still acceptable if you use camel case but that&amp;#39;s just not the &amp;quot;Ruby Way&amp;quot;&lt;/p&gt;

&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;Constants are variables that contain values that you do not expect to change. Consonants must start with a capital letter, and just like the &amp;quot;Ruby Way&amp;quot; we do it with underscores&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unlike some languages, Ruby will let you change the values in constants by assigning a new value to them&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;MINIMUM_CUPS_OF_COFFEE_EVERYDAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NUMBER_OF_FINGERS_IN_ONE_HAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# I&amp;#39;m changing it, haha!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MINIMUM_CUPS_OF_COFFEE_EVERYDAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# YESSSS!!!!!!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NUMBER_OF_FINGERS_IN_ONE_HAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# WHAAAATTTTTT?????!!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conditionals&lt;/h2&gt;

&lt;h3&gt;If statement&lt;/h3&gt;

&lt;p&gt;Our first conditional! yay!&lt;/p&gt;

&lt;p&gt;if-statement is a condtional statement that will execute if the condition is true and it also has an option to execute another code if it returns false. The condition is passed as an argument to the if statement.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# here we have a variable set to true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;you_like_ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# we pass the variable to the if statement&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you_like_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# when the value is true this will be executed&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;We can be friends&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# when the value is false this will be executed&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;We can still be friends&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we can see how natural it feels to read the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like Ruby we can be friends, if not, we can still be friends&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Unless statement&lt;/h3&gt;

&lt;p&gt;This statement is pretty unique to Ruby, the sytax is similar to the &lt;code&gt;if&lt;/code&gt; statement but it works the opposite(because unless is the opposite of if). If the passed value returns &lt;code&gt;false&lt;/code&gt; the first statement will run, &lt;code&gt;unless&lt;/code&gt; also supports &lt;code&gt;else&lt;/code&gt; so if it returns true it will run the code inside the &lt;code&gt;else&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;time_to_drink_coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_to_drink_coffee&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# keep programing with ruby&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# go get coffee&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you notice that i didn&amp;#39;t put &lt;code&gt;()&lt;/code&gt; for passing arguments? Ruby allows us to leave out the parenthesis! :) Isn&amp;#39;t it cool?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s read this like the if statement&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unless it&amp;#39;s time to drink coffee then keep programming with Ruby, if yes(time to drink coffee) then go get coffee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I admin sometimes unless statements gets pretty confusing sometimes. This is how I would use &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead of doing&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# stay in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would prefer to use &lt;code&gt;unless&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# just stay inside&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BUT&lt;/p&gt;

&lt;p&gt;I wouldn&amp;#39;t use an &lt;code&gt;unless&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; because it could be confusing @_@. I would just use an if statement&lt;/p&gt;

&lt;p&gt;Not this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# stay inside&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# go run&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_to_go_out&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# go run&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# stay inside&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;I won&amp;#39;t put case statements here, lets do that next time alrighty&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Nil nils.&lt;/h2&gt;

&lt;p&gt;What is nil? You might be familiar with NULL or nothing/nada. Let&amp;#39;s say we want to perform an operation in an object, but we don&amp;#39;t know if it exists.&lt;/p&gt;

&lt;p&gt;We can simply do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# .nil is a method that you can call any object to check if they have no value or if they have a value.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# it can get oretty tricky because it doesn&amp;#39;t necessarily mean empty.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;quot;&amp;quot; this is an empty string, it&amp;#39;s not nil, but it&amp;#39;s empty&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cool_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cool object doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cool_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Range&lt;/h2&gt;

&lt;p&gt;A range represents an interval or a set of values with a beginning and an end.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# let&amp;#39;s create a range from 1-20&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#to do that we can simply do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_first_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yay! we created a range, but hmm, what can we do with it? ...
Well let&amp;#39;s try going through &lt;code&gt;each&lt;/code&gt; of them and print out their values!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_first_range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;## or optionally&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_first_range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;awesome! that will return&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Simple shorthand trick&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;re familiar with arrays, this is a trick that I showed to turn a range into an array&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;range_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# yup that&amp;#39;s pretty much it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# that will return [1,2,3,4,5] (which is an array)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Arrays&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Yay our first collection&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Arrays are a collection of objects that are in order with index values that start with zero.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# I mentioned that arrays have positions that start with zero.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# here are positions|0|1|2|3|4|&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;one_to_five_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Methods we used in the hangout&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Array#push&lt;/h3&gt;

&lt;p&gt;the &lt;code&gt;push&lt;/code&gt; method takes in an argument and this will be added to the array.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# push for to the array&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# now the x array now has [1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;shorthand bonus&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# the code does the same thing as the code above! :)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Array#pop&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;pop&lt;/code&gt; method deletes the last object in the array. So the object goes.. POP! ... get it? no..? Ok..&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 3 has been &amp;#39;popped&amp;#39; so the x array now contains [1,2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Array#delete&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; method accepts an argument and it finds it in the array and deletes it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# hmmm. too much 1s.. let&amp;#39;s delete them ALL!!!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# now all the 1s are gone [2,3,4,5,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Array#delete_at&lt;/h3&gt;

&lt;p&gt;Last command we used was &lt;code&gt;delete_at&lt;/code&gt;, &lt;code&gt;delete_at&lt;/code&gt; takes in an argument, the argument that we will pass must be the index/position of the object we want to delete in the array&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;also I noticed i just kept on using numbers but an array can hold anything. Watch!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;so_many_types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello Ruby Koding!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello I&amp;#39;m a hash, i will be introduced later&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Sources &amp;amp; Resources:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/about/&quot;&gt;About Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Yukihiro_Matsumoto&quot;&gt;Yukihiro Matsumoto Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rbenv.org&quot;&gt;rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rvm.io&quot;&gt;RVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rubymonk.com&quot;&gt;Ruby Monk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubygems.org/what-is-a-gem/&quot;&gt;What is a ruby gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruby-doc.org/&quot;&gt;Ruby Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/Array.html&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/Range.html&quot;&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    

  </channel> 
</rss>